# vim: syntax=python expandtab
# coding: utf-8

import glob
import os.path
import sys
from itertools import compress
from os import listdir
import fnmatch

configfile: "config.yaml"

# copy all parameters (for readability)
# CODE_BASE               = "/home/NFS/users/yo.kim/SuRE/SuRE-pipeline/code"

CONDA_ENV               = os.path.join(CODE_BASE, 'conda-env-sure.yml')
CONDA_ENV_PY2           = os.path.join(CODE_BASE, 'conda-env-py2.yml')
SAMTOOLS                = "samtools"
WASP_DIR                = os.path.join(CODE_BASE, "WASP/mapping")
PY2_WASP                = "PYTHONPATH=$PYTHONPATH:" + WASP_DIR + " python2.7 "
SNP_DIR                 = "/DATA/home/ludo/projects/LP140430_SureSeq_JvArensbergen/data/LP170210_SuRE42-45_1000Genomes/"
SPLITBAM                = "bam splitChromosome "

cDNA_script             = os.path.join(CODE_BASE, "cDNA-plDNA-count-BC.bash")
iPCR_trim_script        = os.path.join(CODE_BASE, "iPCR-trim.bash")
iPCR_mapOnly_script     = os.path.join(CODE_BASE, "iPCR-map.bash")
iPCR_bam2bedpe_script   = os.path.join(CODE_BASE, "iPCR-bam2bedpe.bash")
iPCR_single_QA_script   = os.path.join(CODE_BASE, "iPCR-single-QA.bash")
iPCR_merge_script       = os.path.join(CODE_BASE, "iPCR-merge-bedpe-Filter-BC-multi-pos.bash")
split_bedpe_script      = os.path.join(CODE_BASE, "split-bedpe2chr.sh")
merge_all_script        = os.path.join(CODE_BASE, "merge-iPCR-cDNA-plDNA.bash")
add_homozygous_baseIdentities_script = os.path.join(CODE_BASE, "add-homozygous-baseIndentities.bash")
VERSIONFILE             = os.path.join(CODE_BASE, "../", "VERSION")

ADPT_SEQ                = config["ADPT_SEQ"]
ADPTR_IPCR_FORW_SEQ     = config["ADPTR_IPCR_FORW_SEQ"]
ADPTR_IPCR_REV_SEQ      = config["ADPTR_IPCR_REV_SEQ"]
BOWTIE2_REFSEQ          = config["BOWTIE2_REFSEQ"]
MAX_INSERT_LENGTH       = config["MAX_INSERT_LENGTH"]
NCORES                  = config["NCORES"]
OUTDIR                  = config["OUTDIR"]
ALLELE_SPECIFIC         = config["ALLELE_SPECIFIC"]
#SNP_DIR                 = config["SNP_DIR"]
GID                     = config["GID"]
CHR_TARGET              = config["CHR_TARGET"]

CHR_ALL                 = ["chr"+str(i) for i in range(1,23)]+['chrX','chrY','chrM']
CHR_AVAIL=list(compress(CHR_ALL, [os.path.isfile(f) for f in expand(os.path.join(config["OUTDIR"], config["iPCR"]["OUTDIR"], "bed-annot", "iPCR-combined-bedpe_{c}_SNPannot.txt.gz"), c=CHR_ALL)]))
#print("CHR_TARGET=")
#print(CHR_TARGET)

# print pipeline VERSION to stdout
with open(VERSIONFILE, 'r') as myfile:
    VERSION=myfile.read().replace('\n', '')
print ("SuRE-seq pipeline version: ", VERSION, "\n\n")

cDNA_SAMPLES=config["cDNA"]["SAMPLES"]
if cDNA_SAMPLES is None:
  cDNA_SAMPLES={}
cDNA_FASTQ_DIR=config["cDNA"]["FASTQ_DIR"]
cDNA_OUTDIR=os.path.join(config["OUTDIR"], config["cDNA"]["OUTDIR"])
cDNA_TARGETS=expand(os.path.join(cDNA_OUTDIR, "{s}", "{s}_trimmed_table.txt.gz"), s=cDNA_SAMPLES.keys())

plDNA_SAMPLES=config["plDNA"]["SAMPLES"]
if plDNA_SAMPLES is None:
  plDNA_SAMPLES={}
plDNA_FASTQ_DIR=config["plDNA"]["FASTQ_DIR"]
plDNA_OUTDIR=os.path.join(config["OUTDIR"], config["plDNA"]["OUTDIR"])
plDNA_TARGETS=expand(os.path.join(plDNA_OUTDIR, "{s}", "{s}_trimmed_table.txt.gz"), s=plDNA_SAMPLES.keys())

iPCR_SAMPLES=config["iPCR"]["SAMPLES"]
if iPCR_SAMPLES is None:
  iPCR_SAMPLES={}
iPCR_SAMPLE2FILES={sample:[iPCR_SAMPLES[sample]["R1"],iPCR_SAMPLES[sample]["R2"]] for sample in iPCR_SAMPLES.keys()}
iPCR_FASTQ_DIR=config["iPCR"]["FASTQ_DIR"]
iPCR_OUTDIR=os.path.join(OUTDIR, config["iPCR"]["OUTDIR"])
BEDPE_FILES=expand(os.path.join(iPCR_OUTDIR, "{s}", "{s}.bedpe.gz"), s=iPCR_SAMPLES.keys())
iPCR_TARGETS=expand(os.path.join(OUTDIR, "SuRE-counts_{c}.txt.gz"), c=CHR_TARGET+CHR_AVAIL)

if (ALLELE_SPECIFIC is None) or (ALLELE_SPECIFIC == 0):
  GID = None
  SNP_DIR=""
  VCF_DIR=""
  print("processing in non-allele specific manner")
else:
  if GID is None:
    sys.exit("ALLELE_SPECIFIC processing requested but no GID specified")
  if SNP_DIR is None:
    sys.exit("ALLELE_SPECIFIC processing requested but no SNP_DIR specified")
  VCF_DIR=SNP_DIR
  SNP_DIR=os.path.join(SNP_DIR, "SNPs")
  if not(os.path.exists(SNP_DIR)):
    sys.exit("GID is defined but SNP directory doesn't exist")
  print("reading SNPs from " + SNP_DIR)
  print("reading VCF from " + VCF_DIR)

# TYPES=["cDNA","plDNA"]

include: os.path.join(CODE_BASE, "bed2coverage/bed2coverage.rule")

rule all:
  input:
    cDNA_TARGETS, plDNA_TARGETS, iPCR_TARGETS
#    "bed2coverage.done"
#    "QA.done"

rule QA:
  input:
    expand(os.path.join(iPCR_OUTDIR, "{s}", "iPCR_single_QA.{s}.done"), s=iPCR_SAMPLES.keys())
  output:
    temp(touch("QA.done"))

rule cDNA:
  input:
    lambda wildcards: [os.path.join(cDNA_FASTQ_DIR, f) for f in cDNA_SAMPLES[wildcards.s]]
  output:
    os.path.join(cDNA_OUTDIR, "{s}", "{s}_trimmed_table.txt.gz")
  params:
    dir=os.path.join(cDNA_OUTDIR,"{s}"),
    basename="{s}"
  conda: CONDA_ENV
  shell:
    "{cDNA_script} -l -b '{params.basename}' -o '{params.dir}' -a {ADPT_SEQ} {input}"

rule plDNA:
  input:
    lambda wildcards: [os.path.join(plDNA_FASTQ_DIR, f) for f in plDNA_SAMPLES[wildcards.s]]
  output:
    os.path.join(plDNA_OUTDIR, "{s}", "{s}_trimmed_table.txt.gz")
  params:
    dir=os.path.join(plDNA_OUTDIR,"{s}"),
    basename="{s}"
  conda: CONDA_ENV
  shell:
    "{cDNA_script} -l -b '{params.basename}' -o '{params.dir}' -a {ADPT_SEQ} {input}"

rule iPCR_trim:
  input:
    lambda wildcards: [os.path.join(iPCR_FASTQ_DIR, f) for f in iPCR_SAMPLE2FILES[wildcards.s]]
  output:
    os.path.join(iPCR_OUTDIR,"{s}","fastq1","{s}_forw.fastq.gz"), 
    os.path.join(iPCR_OUTDIR,"{s}","fastq1","{s}_rev.fastq.gz"),
    os.path.join(iPCR_OUTDIR,"{s}","fastq1","{s}_forw.info")
  params:
    dir=os.path.join(iPCR_OUTDIR,"{s}", "fastq1"),
    cutmotif=lambda wildcards: iPCR_SAMPLES[wildcards.s]["CUTMOTIF"],
    forwAdaptr=ADPTR_IPCR_FORW_SEQ,
    revAdaptr=ADPTR_IPCR_REV_SEQ,
    basename="{s}"
  conda: CONDA_ENV
  shell:
    "{iPCR_trim_script} -o '{params.dir}' -l -d '{params.cutmotif}' -b '{params.basename}' -f '{params.forwAdaptr}' -r '{params.revAdaptr}' -c {input}; "
    "gzip '{params.dir}'/*fastq"

rule iPCR_WASP_find_SNPs:
  """find intersecting SNPs using WASP script"""
  input:
    bam=os.path.join(iPCR_OUTDIR,"{s}","map1_sort","{s}_{c}.bam"),
    snpdir=SNP_DIR
  output:
    fastq1=os.path.join(iPCR_OUTDIR,"{s}","fastq2","{s}_{c}_forw.fastq.gz"),
    fastq2=os.path.join(iPCR_OUTDIR,"{s}","fastq2","{s}_{c}_rev.fastq.gz"),
    keep=os.path.join(iPCR_OUTDIR,"{s}","fastq2","{s}_{c}.keep.bam"),
    remap=os.path.join(iPCR_OUTDIR,"{s}","fastq2","{s}_{c}.to.remap.bam")
  params:
    dir=os.path.join(iPCR_OUTDIR,"{s}","fastq2"),
    bname="{s}_{c}"
  conda: CONDA_ENV_PY2
  shell:
    "mkdir -p '{params.dir}' ; "
    "{PY2_WASP} {WASP_DIR}/find_intersecting_snps.py "
    "--is_paired_end --is_sorted --output_dir '{params.dir}' --snp_dir {input.snpdir} {input.bam}; "
    "mv '{params.dir}'/'{params.bname}'.remap.fq1.gz {output[0]}; "
    "mv '{params.dir}'/'{params.bname}'.remap.fq2.gz {output[1]}; "

rule iPCR_WASP_filter_remapped_reads:
  """filter reads from second mapping step"""
  input:
    to_remap_bam=os.path.join(iPCR_OUTDIR,"{s}","fastq2","{s}_{c}.to.remap.bam"),
    remap_bam=os.path.join(iPCR_OUTDIR,"{s}","map2_sort","{s}_{c}.bam")
  output:
    keep_bam=os.path.join(iPCR_OUTDIR,"{s}","filter_remapped_reads","{s}_{c}.keep.bam")
  params:
    dir=os.path.join(iPCR_OUTDIR,"{s}","filter_remapped_reads")
  conda: CONDA_ENV_PY2
  shell:
    "mkdir -p '{params.dir}' ; "
    "{PY2_WASP} {WASP_DIR}/filter_remapped_reads.py "
    "  {input.to_remap_bam} {input.remap_bam} {output.keep_bam}"

ruleorder: iPCR_splitBAM > iPCR_WASP_sort_and_index_bam > iPCR_WASP_map_bowtie2_paired_end
rule iPCR_splitBAM:
  input:
    os.path.join(iPCR_OUTDIR,"{s}","map1_sort", "{s}.bam")
  output:
    expand(os.path.join(iPCR_OUTDIR,"{{s}}","map1_sort", "{{s}}_{c}.bam"),c=CHR_TARGET)
  params:
    noext=os.path.join(iPCR_OUTDIR,"{s}","map1_sort","{s}_")
  conda: CONDA_ENV
  shell:
    "{SPLITBAM} --in {input} --out '{params.noext}'; "
    "for f in '{params.noext}'chr*.bam; do {SAMTOOLS} index $f; done ; "

rule iPCR_WASP_sort_and_index_bam:
  input:
    os.path.join(iPCR_OUTDIR,"{s}","map{p}","{b}.bam")
  output:
    os.path.join(iPCR_OUTDIR,"{s}","map{p}_sort","{b}.bam")
  params:
    dir=os.path.join(iPCR_OUTDIR,"{s}","map{p}_sort")
  threads: 
    4
  conda: CONDA_ENV
  resources:
    ram=100
  shell:
    "mkdir -p '{params.dir}' ; "
    "{SAMTOOLS} sort -o {output[0]} -@ {threads} -m 20G {input} -T {output[0]} ; "
    "{SAMTOOLS} index {output[0]} ; "


rule iPCR_WASP_map_bowtie2_paired_end:
  input:
    os.path.join(iPCR_OUTDIR,"{s}","fastq{p}","{b}_forw.fastq.gz"),
    os.path.join(iPCR_OUTDIR,"{s}","fastq{p}","{b}_rev.fastq.gz")
  output:
    os.path.join(iPCR_OUTDIR,"{s}","map{p}","{b}.bam")
  params:
    dir=os.path.join(iPCR_OUTDIR,"{s}","map{p}"),
    stats=os.path.join(iPCR_OUTDIR,"{s}","{b}.stats"),
    basename="{b}",
    refseq=BOWTIE2_REFSEQ,
    maxInsert=MAX_INSERT_LENGTH
  threads: 
    5
  conda: CONDA_ENV
  priority: 50
  shell:
    "{iPCR_mapOnly_script} -o '{params.dir}' -l -n {threads} -t $PWD/'{params.stats}' -b '{params.basename}' -m '{params.maxInsert}' -s '{params.refseq}' -c {input}"

rule iPCR_WASP_merge_bams:
  """merge 'keep' BAM files from mapping steps 1 and 2, then sort and index"""
  input:
    keep1=os.path.join(iPCR_OUTDIR,"{s}","fastq2","{s}_{c}.keep.bam"),
    keep2=os.path.join(iPCR_OUTDIR,"{s}","filter_remapped_reads","{s}_{c}.keep.bam")
  output:
    merge=os.path.join(iPCR_OUTDIR,"{s}","merge","{s}_{c}.keep.merge.bam"),
  threads: 
    4
  params:
    dir=os.path.join(iPCR_OUTDIR,"{s}","merge")
  conda: CONDA_ENV
  shell:
    "mkdir -p '{params.dir}' ; "
    "{SAMTOOLS} merge {output.merge} {input.keep1} {input.keep2}; "

def iPCR_map_input(wildcards):
  if (ALLELE_SPECIFIC):
    return os.path.join(iPCR_OUTDIR,wildcards.s,"merge",wildcards.s+"_"+wildcards.c+".keep.merge.bam") 
  else:
    return os.path.join(iPCR_OUTDIR,wildcards.s,"map1_sort",wildcards.s+"_"+wildcards.c+".bam")

rule iPCR_map:
  input: iPCR_map_input
  output:
    bamfinal=os.path.join(iPCR_OUTDIR,"{s}","{s}_{c}.bam")
  threads:
    4
  conda: CONDA_ENV
  shell:
    "{SAMTOOLS} sort -n -o {output} -@ {threads} -m 20G  {input} -T {input}; "
      
rule iPCR_bam2bedpe:
  input:
    os.path.join(iPCR_OUTDIR,"{s}","{s}_{c}.bam"),
    os.path.join(iPCR_OUTDIR,"{s}","fastq1","{s}_forw.info")
  output:
    os.path.join(iPCR_OUTDIR, "{s}", "{s}_{c}.bedpe.gz")
  params:
    dir=os.path.join(iPCR_OUTDIR,"{s}"),
    basename="{s}"
  conda: CONDA_ENV
  shell:
    "{iPCR_bam2bedpe_script} -o '{params.dir}' -l -b '{params.basename}' {input}" 

#rule iPCR_merge_bedpe:
#  input:
#     BEDPE_FILES
#  output:
#    os.path.join(iPCR_OUTDIR, "iPCR-combined-bedpe.txt.gz")
#  shell:
#    "{iPCR_merge_script} -l -o {iPCR_OUTDIR} {input}"
#
#rule iPCR_preMerge_WASP:
rule iPCR_merge_bedpe:
  input:
    expand(os.path.join(iPCR_OUTDIR, "{s}", "{s}_{{c}}.bedpe.gz"), s=iPCR_SAMPLES.keys())
  output:
    os.path.join(iPCR_OUTDIR, "bed-annot", "iPCR-combined-bedpe_{c}.txt.gz")
  params:
    dir=os.path.join(iPCR_OUTDIR, "bed-annot")
  conda: CONDA_ENV
  shell:
    "{iPCR_merge_script} -l -o '{params.dir}' -b {output} {input}"

rule iPCR_annot_WASP:
  input:
    bedpe=os.path.join(iPCR_OUTDIR, "bed-annot", "iPCR-combined-bedpe_{c}.txt.gz"),
    snpdir=SNP_DIR,
    vcf=lambda wildcards: [os.path.join(VCF_DIR,f) for f in listdir(VCF_DIR) if fnmatch.fnmatch(f, "ALL."+wildcards.c+".phase3_shapeit2_mvncall_integrated_*.20130502.genotypes_HG02601_NA18983_HG01241_HG03464_LP170414.vcf.gz")]
  output:
    os.path.join(iPCR_OUTDIR, "bed-annot", "iPCR-combined-bedpe_{c}_SNPannot.txt.gz")
  resources:
    ram=25
  params:
    gid=GID
  conda: CONDA_ENV_PY2
  shell:
    "{PY2_WASP} {WASP_DIR}/annotate_bedpe_LP170516.py --snp_dir {input.snpdir} {input.bedpe} | sort -k6 -S 20G | gzip -c > {output}.tmp ; "
    "{add_homozygous_baseIdentities_script} {input.vcf} {output}.tmp '{params.gid}' | gzip -c > {output} ;  "
    "rm -f {output}.tmp"
#    "mv {output.out}.tmp {output.out}"

def merge_all_input(wildcards):
  if (ALLELE_SPECIFIC):
    return os.path.join(iPCR_OUTDIR, "bed-annot", "iPCR-combined-bedpe_"+wildcards.c+"_SNPannot.txt.gz")
  else:
    return os.path.join(iPCR_OUTDIR, "bed-annot", "iPCR-combined-bedpe_"+wildcards.c+".txt.gz")

rule merge_all:
  input:
    iPCR=merge_all_input,
    cDNA=expand(os.path.join(cDNA_OUTDIR, "{s}", "{s}_trimmed_table.txt.gz"), s=cDNA_SAMPLES.keys()),
    plDNA=expand(os.path.join(plDNA_OUTDIR, "{s}", "{s}_trimmed_table.txt.gz"), s=plDNA_SAMPLES.keys()),
  output:
    out=os.path.join(OUTDIR, "SuRE-counts_{c}.txt.gz")
  params:
    iPCR=merge_all_input
  conda: CONDA_ENV
  shell:
    "{merge_all_script} -l -i {input.iPCR} -o {OUTDIR} -d {output.out} {input.cDNA} {input.plDNA} ; "
#    "mv {outpout.out} {output.out}.tmp"
#    "{add_homozygous_baseIdentities_script} {input.vcf} {output.out}.tmp '{params.gid}' | gzip -c > {output.out}; "
#    "rm -f {output.out}.tmp"

rule iPCR_single_QA:
  input:
    os.path.join(iPCR_OUTDIR, "{s}", "{s}.bedpe.gz")
  output:
    touch(os.path.join(iPCR_OUTDIR, "{s}", "iPCR_single_QA.{s}.done"))
  params:
    basename="{s}",
    outdir=os.path.join(iPCR_OUTDIR,"{s}")
  conda: CONDA_ENV
  shell:
    "{iPCR_single_QA_script} -l -b '{params.basename}' -o '{params.outdir}'"

#rule iPCR_single_QA:
#  input:
#    expand(os.path.join(iPCR_OUTDIR, "{s}", "iPCR_single_QA.{s}.done"), s=iPCR_SAMPLES.keys())
#  output:
#    temp(touch(os.path.join(iPCR_OUTDIR, "{s}", "iPCR_single_QA.done")))

